#! /usr/bin/env python
# -*- encoding:utf-8 -*-

"""
Usage:
   lys deploy-listener <event> <function> (<regexp> | (<field> <condition> \
<value>)...) [-n <node>]
   lys update-listener <webhook-id> (<regexp> | (<field> <condition> \
<value>)...)
   lys destroy-listener
   lys show-listeners
   lys start-listening [-p <port>]
   lys restart-listeners
   lys stop-listening
   lys show-log
   lys public-ip
   lys grant <public-key>...

Options:
-n --node=<node> : the node registering the webhook
-p --port=<port> : the port used for listening srv [default: 5001]

Subcommands:
   deploy-listener   : link a webhook <event> with a python <function>
   update-listener   : change <event> trigger conditions
   destroy-listener  : unlink webhook <event> from python <function>
   show-listeners    : print a sumary of registered <event>
   start-listening   : start/restart listener server
   restart-listeners : restart listener server
   stop-listening    : stop listener server
   show-log          : show server log
   public-ip         : get public ip
   grant             : allow remote controle to <public-key> owner
"""

import os
import sys
import docopt
import binascii
import traceback

# add git installation
sys.path.append(os.path.abspath(os.path.expanduser("~/ark-listener")))
# add parent path if executed from git structure
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

import lystener
import cSecp256k1 as secp256k1
from lystener import dumpJson, logMsg, server, rest, checkPluginDependencies
from lystener.client import deploy_listener


def public_ip(args={}, **options):
    public_ip = rest.GET.plain(peer="https://www.ipecho.net").get(
        "raw", rest.getPublicIp()
    )
    logMsg("%s\n" % public_ip)


def start_listening(args={}, **options):
    checkPluginDependencies()
    # remove salt file
    salt = os.path.join(lystener.JSON, "salt")
    if os.path.exists(salt):
        os.remove(salt)
    server.deploy(port=options["port"])


def stop_listening(args={}, **options):
    os.system("sudo systemctl stop lys")


def restart_listeners(args={}, **options):
    checkPluginDependencies()
    # remove salt file
    salt = os.path.join(lystener.JSON, "salt")
    if os.path.exists(salt):
        os.remove(salt)
    os.system("sudo systemctl restart lys")


def show_log(args={}, **options):
    os.system("journalctl -u lys -ef")


def grant(args={}, **options):
    auth = lystener.loadJson("auth")
    if not len(auth):
        auth = []
    for elem in args.get("<public-key>", []):
        try:
            secp256k1.point_from_encoded(binascii.unhexlify(elem))
        except Exception:
            wallet = rest.GET.api.wallets(
                elem, peer="https://explorer.ark.io:8443"
            ).get("data", {})
            puk = wallet.get("publicKey", None)
            if puk is not None:
                auth.append(wallet["publicKey"])
                lystener.logMsg(
                    "%s granted as %s" % (elem, wallet["publicKey"])
                )
            else:
                lystener.logMsg("%s can't be granted" % elem)
        else:
            lystener.logMsg("%s granted" % elem)
            auth.append(elem)
    lystener.dumpJson(list(set(auth)), "auth")


def update_listener(args={}, **options):
    """
    update event conditions.
    """

    webhook = {}
    filename = ""
    webhook_id = args.get("<webhook-id>", options.get("webhook_id", None))

    for name in [n for n in os.listdir(lystener.JSON) if n.endswith(".json")]:
        data = lystener.loadJson(name)
        if data.get("id", "") == webhook_id:
            webhook = data
            filename = name
            break

    regexp = args.get("<regexp>", options.get("regexp", None))
    # compute listener condition
    # if only a regexp is givent compute condition on vendorField
    if regexp is not None:
        conditions = [{
            "key": "vendorField",
            "condition": "regexp",
            "value": regexp
        }]
    # else create a condition.
    # Ark webhook api will manage condition errors
    else:
        conditions = list(
            {"key": k, "condition": c, "value": v} for k, c, v in zip(
                args.get("<field>", options.get("field", [])),
                args.get("<condition>", options.get("condition", [])),
                args.get("<value>", options.get("value", []))
            )
        )

    try:
        if webhook.get("peer", False):
            # update the webhook
            data = dict([
                (k, v) for k, v in webhook.items()
                if k not in ["id", "token", "peer"]
            ], conditions=conditions)
            req = rest.PUT.api.webhooks(
                webhook_id, peer=webhook["peer"], **data
            )
            if req.get("status", 500) < 300:
                webhook["conditions"] = conditions
                dumpJson(webhook, filename)
                logMsg("webhook %s updated" % webhook_id)
            else:
                logMsg("webhook %s not updated:\n%r" % (webhook_id, req))
        else:
            lystener.logMsg("webhook %s not found" % webhook_id)
    except Exception as error:
        lystener.logMsg("%s" % webhook)
        lystener.logMsg("%r\n%s" % (error, traceback.format_exc()))


def destroy_listener(args={}, **options):
    """
    unlink blockchain event from a id list.
    """
    pairs = {}
    for name in [n for n in os.listdir(lystener.JSON) if n.endswith(".json")]:
        data = lystener.loadJson(name)
        if "id" in data:
            pairs[data["id"]] = name.replace(".json", "")

    id_ = lystener.chooseItem(
        "Select listener to destroy:",
        *[v for v in pairs.keys() if v]
    )
    if not id_:
        return
    json_name = "%s.json" % pairs[id_]

    # load webhook configuration
    webhook = lystener.loadJson(json_name)
    # condition bellow checks if webhook configurations is found
    try:
        if webhook.get("peer", False):
            # delete webhook using its id and parent peer
            req = rest.DELETE.api.webhooks(
                webhook["id"], peer=webhook["peer"]
            )
            # delete the webhook configuration
            os.remove(os.path.join(lystener.JSON, json_name))
            # remove token from db
            token_db = lystener.loadJson("token")
            token_db.pop(webhook["id"], False)
            lystener.dumpJson(token_db, "token")
            if req.get("status", 500) < 300:
                lystener.logMsg("%s webhook destroyed" % id_)
            else:
                lystener.logMsg("%s webhook not destroyed:\n%r" % (id_, req))
        else:
            lystener.logMsg("%s webhook not found" % id_)
    except Exception as error:
        lystener.logMsg("%s" % webhook)
        lystener.logMsg("%r\n%s" % (error, traceback.format_exc()))


def show_listeners(args={}, **options):

    for name in [n for n in os.listdir(lystener.JSON) if n.endswith(".json")]:
        data = lystener.loadJson(name)
        data["conditions"] = ",".join(
            [" ".join(d.values()) for d in data["conditions"]]
        )
        lystener.logMsg(
            "%(id)s:\n    %(target)s|%(conditions)s|{%(peer)s}" % data
        )


# command line execution
########################
if __name__ == "__main__":

    FILTER = {
        "<regexp>": lambda value: getattr(value, "pattern", value)
    }

    # will get the first argument which is neither a value neither an option
    def getAction(args):
        for action in [k for k in args if k[0] not in ["-", "<"]]:
            if args[action] is True:
                return action
        return False

    # will rename --multi-word-option to multi_word_option
    def getOptions(args):
        options = {}
        for option, value in [
            (k, v) for k, v in args.items() if k.startswith("--")
            and v is not None
        ]:
            options[option[2:].replace("-", "_")] = value
        return dict((k, v) for k, v in options.items() if v is not None)

    # see http://docopt.org
    args = docopt.docopt(__doc__, argv=sys.argv[1:])
    for key, cast in [(k, c) for k, c in FILTER.items() if k in args]:
        args[key] = cast(args[key])

    action = getAction(args)
    options = getOptions(args)

    if action:
        # rename multi-word-action to multi_word_action
        func = getattr(sys.modules[__name__], action.replace("-", "_"))
        if callable(func):
            func(args, **options)
